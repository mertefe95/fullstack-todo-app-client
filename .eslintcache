[{"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\index.js":"1","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\App.js":"2","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AllTodos.js":"3","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Register.js":"4","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Login.js":"5","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\context\\UserContext.js":"6","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Footer.js":"7","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AddTodo.js":"8","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\MyTodos.js":"9","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Header.js":"10","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\404.js":"11"},{"size":161,"mtime":1612553265270,"results":"12","hashOfConfig":"13"},{"size":2077,"mtime":1612616350507,"results":"14","hashOfConfig":"13"},{"size":4360,"mtime":1613126876506,"results":"15","hashOfConfig":"13"},{"size":4350,"mtime":1612553208422,"results":"16","hashOfConfig":"13"},{"size":3855,"mtime":1612553346142,"results":"17","hashOfConfig":"13"},{"size":74,"mtime":1612553208421,"results":"18","hashOfConfig":"13"},{"size":108,"mtime":1612553208421,"results":"19","hashOfConfig":"13"},{"size":3854,"mtime":1612555499397,"results":"20","hashOfConfig":"13"},{"size":3878,"mtime":1612616312812,"results":"21","hashOfConfig":"13"},{"size":1252,"mtime":1612553208422,"results":"22","hashOfConfig":"13"},{"size":1305,"mtime":1612602819847,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1x4qhf2",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\index.js",[],["52","53"],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\App.js",["54"],"import Footer from \"./components/layout/Footer\"\nimport Header from \"./components/layout/Header\"\nimport AllTodos from \"./components/AllTodos\"\nimport React, { useState, useEffect } from \"react\"\nimport UserContext from \"./components/context/UserContext\"\nimport Axios from \"axios\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Register from \"./components/Register\"\nimport Login from \"./components/Login\"\nimport AddTodo from \"./components/AddTodo\"\nimport MyTodos from \"./components/MyTodos\"\nimport pageNotFound from \"./components/404\";\n\nimport \"./App.css\"\n\nfunction App() {\n\tconst [todos, setTodos] = useState([])\n\n\tconst [userData, setUserData] = useState({\n\t\ttoken: null,\n\t\tuser: {\n\t\t\tid: null,\n\t\t\temail: null,\n\t\t\tusername: null,\n\t\t},\n\t})\n\n\tuseEffect(() => {\n\t\tconst checkLoggedIn = async () => {\n\t\t\tlet token = localStorage.getItem(\"auth-token\")\n\t\t\tif (token === null) {\n\t\t\t\tlocalStorage.setItem(\"auth-token\", \"\")\n\t\t\t\ttoken = \"\"\n\t\t\t}\n\n\t\t\tconst userRes = await Axios({\n\t\t\t\tmethod: \"post\",\n\t\t\t\turl: \"https://fullstack-todo-app-server.herokuapp.com/users/tokenIsValid\",\n\t\t\t\tdata: {},\n\t\t\t\theaders: {\n\t\t\t\t\t\"x-auth-token\": token,\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tsetUserData({\n\t\t\t\ttoken: token,\n\t\t\t\tuser: userRes.data,\n\t\t\t})\n\t\t}\n\n\t\tcheckLoggedIn()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tAxios.get(\"https://fullstack-todo-app-server.herokuapp.com/todos\")\n\t\t\t.then((res) => setTodos(res.data))\n\t\t\t.catch((error) => console.log(error))\n\t})\n\n\treturn (\n\t\t<Router>\n\t\t\t<UserContext.Provider value={{ userData, setUserData }}>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" render={() => <AllTodos todos={todos} />} />\n\t\t\t\t\t<Route exact path=\"/register\" component={Register} />\n\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t<Route exact path=\"/add-todo\" component={AddTodo} />\n\t\t\t\t\t\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact path=\"/mytodos\"\n\t\t\t\t\t\trender={() => <MyTodos todos={todos} />}\n\t\t\t\t\t/>\n\t\t\t\t\t<Route component={pageNotFound} />\n\t\t\t\t</Switch>\n\t\t\t\t<Footer />\n\t\t\t</UserContext.Provider>\n\t\t</Router>\n\t)\n}\n\nexport default App\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AllTodos.js",["55","56","57","58","59","60"],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Register.js",[],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Login.js",["61"],"import React, { useState, useContext } from \"react\"\nimport { useHistory } from \"react-router-dom\"\nimport { Button } from \"react-bootstrap\"\nimport { Form, Formik, Field, ErrorMessage } from \"formik\"\nimport Axios from \"axios\"\nimport Alert from \"react-bootstrap/Alert\"\nimport * as Yup from \"yup\"\nimport TextField from \"@material-ui/core/TextField\"\nimport { Link } from \"react-router-dom\"\nimport UserContext from \"./context/UserContext\"\n\nfunction Login() {\n\tconst [show, setShow] = useState({\n\t\tsuccessText: \"\",\n\t\terrorText: \"\",\n\t})\n\n\tconst { userData, setUserData } = useContext(UserContext)\n\tconst history = useHistory()\n\n\tconst initialValues = {\n\t\temail: \"\",\n\t\tpassword: \"\",\n\t}\n\n\tconst validationSchema = Yup.object().shape({\n\t\temail: Yup.string().email(\"Invalid email address\").required(\"Required\"),\n\t\tpassword: Yup.string().required(\"Required\"),\n\t})\n\n\treturn (\n\t\t<div className=\"login-div\">\n\t\t\t<Formik\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tvalidationSchema={validationSchema}\n\t\t\t\tonSubmit={async (values) => {\n\t\t\t\t\tawait Axios.post(\n\t\t\t\t\t\t\"https://fullstack-todo-app-server.herokuapp.com/users/login\",\n\t\t\t\t\t\tvalues\n\t\t\t\t\t)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tsetUserData({\n\t\t\t\t\t\t\t\ttoken: response.data.token,\n\t\t\t\t\t\t\t\tuser: response.data.user,\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\tlocalStorage.setItem(\"auth-token\", response.data.token)\n\t\t\t\t\t\t\thistory.push(\"/\")\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tsetShow({ errorText: err.response.data.msg })\n\t\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{({ values, isSubmitting }) => (\n\t\t\t\t\t<Form className=\"register-form\">\n\t\t\t\t\t\t{show.errorText ? (\n\t\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\t\tonClose={() => setShow({ errorText: \"\" })}\n\t\t\t\t\t\t\t\tdismissible\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n\t\t\t\t\t\t\t\t<p>{show.errorText}</p>\n\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{show.successText ? (\n\t\t\t\t\t\t\t<Alert className=\"successmessage\" show={show} variant=\"success\">\n\t\t\t\t\t\t\t\t<Alert.Heading className=\"sucessheader\">Success!</Alert.Heading>\n\t\t\t\t\t\t\t\t<p className=\"successtext\">{show.successText}</p>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tstyle={{ flexDirection: \"row\" }}\n\t\t\t\t\t\t\t\t\tclassName=\"success-text-div d-flex  justify-content-end\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Link className=\"success-text-login\" to=\"/login\">\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => setShow({ successText: \"\" })}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline-success\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tGo to Login Page\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => setShow({ successText: \"\" })}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-success\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<div className=\"email-div\">\n\t\t\t\t\t\t\t<label className=\"label email-label\" htmlFor=\"email\">\n\t\t\t\t\t\t\t\tEmail address\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tas={TextField}\n\t\t\t\t\t\t\t\tclassName=\"field email-field\"\n\t\t\t\t\t\t\t\ttype=\"email\"\n\t\t\t\t\t\t\t\tid=\"email\"\n\t\t\t\t\t\t\t\tname=\"email\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter email\"\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<ErrorMessage className=\"errormessage\" name=\"email\">\n\t\t\t\t\t\t\t\t{(msg) => (\n\t\t\t\t\t\t\t\t\t<Alert className=\"alertmessage\" variant=\"danger\">\n\t\t\t\t\t\t\t\t\t\t{msg}\n\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"password-div\">\n\t\t\t\t\t\t\t<label className=\"label password-label\">Password</label>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tas={TextField}\n\t\t\t\t\t\t\t\tclassName=\"field password-field\"\n\t\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ErrorMessage className=\"errormessage\" name=\"password\">\n\t\t\t\t\t\t\t\t{(msg) => (\n\t\t\t\t\t\t\t\t\t<Alert className=\"alertmessage\" variant=\"danger\">\n\t\t\t\t\t\t\t\t\t\t{msg}\n\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\t</div>\n\t)\n}\n\nexport default Login\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\context\\UserContext.js",[],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Footer.js",[],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AddTodo.js",["62"],"import React, { useState, useContext } from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { Form, Formik, Field, ErrorMessage } from \"formik\"\nimport Axios from \"axios\"\nimport Alert from \"react-bootstrap/Alert\"\nimport * as Yup from \"yup\"\nimport TextField from \"@material-ui/core/TextField\"\nimport { Link } from \"react-router-dom\"\nimport UserContext from \"./context/UserContext\"\n\nfunction AddTodo() {\n\tconst { userData, setUserData } = useContext(UserContext)\n\n\tconst [show, setShow] = useState({\n\t\tsuccessText: \"\",\n\t\terrorText: \"\",\n\t})\n\n\tconst initialValues = {\n\t\ttitle: \"\",\n\t\ttext: \"\",\n\t}\n\n\tconst validationSchema = Yup.object().shape({\n\t\ttitle: Yup.string().required(\"Required\"),\n\t\ttext: Yup.string().required(\"Required\"),\n\t})\n\n\treturn (\n\t\t<div className=\"register-div\">\n\t\t\t<Formik\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tvalidationSchema={validationSchema}\n\t\t\t\tonSubmit={async (values) => {\n\t\t\t\t\tvalues.userId = userData.user.id\n\t\t\t\t\tvalues.author = userData.user.username\n\t\t\t\t\tawait Axios.post(\n\t\t\t\t\t\t\"https://fullstack-todo-app-server.herokuapp.com/todos/add\",\n\t\t\t\t\t\tvalues\n\t\t\t\t\t)\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\tsetShow({ successText: response.data.msg })\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tsetShow({ errorText: err.response.data.msg })\n\t\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{({ values, isSubmitting }) => (\n\t\t\t\t\t<Form className=\"register-form\">\n\t\t\t\t\t\t{show.errorText ? (\n\t\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\t\tonClose={() => setShow({ errorText: \"\" })}\n\t\t\t\t\t\t\t\tdismissible\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n\t\t\t\t\t\t\t\t<p>{show.errorText}</p>\n\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t{show.successText ? (\n\t\t\t\t\t\t\t<Alert className=\"successmessage\" show={show} variant=\"success\">\n\t\t\t\t\t\t\t\t<Alert.Heading className=\"sucessheader\">Success!</Alert.Heading>\n\t\t\t\t\t\t\t\t<p className=\"successtext\">{show.successText}</p>\n\t\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tstyle={{ flexDirection: \"row\" }}\n\t\t\t\t\t\t\t\t\tclassName=\"success-text-div d-flex  justify-content-end\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Link className=\"success-text-login\" to=\"/login\">\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => setShow({ successText: \"\" })}\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"outline-success\"\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tGo to Home Page\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tonClick={() => setShow({ successText: \"\" })}\n\t\t\t\t\t\t\t\t\t\tvariant=\"outline-success\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t<div className=\"title\">\n\t\t\t\t\t\t\t<label className=\"label title-label\" htmlFor=\"username\">\n\t\t\t\t\t\t\t\tTitle\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tas={TextField}\n\t\t\t\t\t\t\t\tclassName=\"field title-field\"\n\t\t\t\t\t\t\t\tid=\"title\"\n\t\t\t\t\t\t\t\tname=\"title\"\n\t\t\t\t\t\t\t\ttype=\"type\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter title\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className=\"text-muted\">\n\t\t\t\t\t\t\t\tProvide us a todo title that you would like to have.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<ErrorMessage className=\"errormessage\" name=\"username\">\n\t\t\t\t\t\t\t\t{(msg) => (\n\t\t\t\t\t\t\t\t\t<Alert className=\"alertmessage\" variant=\"danger\">\n\t\t\t\t\t\t\t\t\t\t{msg}\n\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"text-div\">\n\t\t\t\t\t\t\t<label className=\"label text-label\" htmlFor=\"text\">\n\t\t\t\t\t\t\t\tText\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<Field\n\t\t\t\t\t\t\t\tas={TextField}\n\t\t\t\t\t\t\t\tclassName=\"field text-field\"\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tid=\"text\"\n\t\t\t\t\t\t\t\tname=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter text\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className=\"text-muted\">Write your todo text here.</p>\n\t\t\t\t\t\t\t<ErrorMessage className=\"errormessage\" name=\"email\">\n\t\t\t\t\t\t\t\t{(msg) => (\n\t\t\t\t\t\t\t\t\t<Alert className=\"alertmessage\" variant=\"danger\">\n\t\t\t\t\t\t\t\t\t\t{msg}\n\t\t\t\t\t\t\t\t\t</Alert>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</ErrorMessage>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Form>\n\t\t\t\t)}\n\t\t\t</Formik>\n\t\t</div>\n\t)\n}\n\nexport default AddTodo\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\MyTodos.js",["63","64"],"import React, { useContext, useState } from \"react\"\nimport Card from \"react-bootstrap/Card\"\nimport UserContext from \"./context/UserContext\"\nimport { PencilSquare } from \"react-bootstrap-icons\"\nimport { XSquare } from \"react-bootstrap-icons\"\nimport { XSquareFill } from \"react-bootstrap-icons\"\nimport { Check2Square } from \"react-bootstrap-icons\"\nimport Alert from \"react-bootstrap/Alert\"\nimport { Link } from \"react-router-dom\"\nimport { Button, Form } from \"react-bootstrap\"\nimport Axios from \"axios\"\n\nfunction MyTodos({ todos }) {\n\tconst { userData } = useContext(UserContext)\n\n\tconsole.log(userData)\n\n\tconst [edit, setEdit] = useState(false)\n\tconst [editTitle, setEditTitle] = useState()\n\tconst [editText, setEditText] = useState()\n\tconst [show, setShow] = useState({\n\t\tsuccessText: \"\",\n\t\terrorText: \"\",\n\t})\n\n\tconst onDelete = async (id) => {\n\t\tawait Axios.delete(`https://fullstack-todo-app-server.herokuapp.com/todos/${id}`)\n\t\t\t.then((response) => {\n\t\t\t\tsetShow({ successText: response.data.msg })\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetShow({ errorText: err.response.data.msg })\n\t\t\t})\n\t}\n\n\tconst onEdit = async (id) => {\n\t\tlet editTodo = {\n\t\t\ttitle: editTitle,\n\t\t\ttext: editText,\n\t\t}\n\n\t\tawait Axios.put(`https://fullstack-todo-app-server.herokuapp.com/todos/${id}`, editTodo)\n\t\t\t.then((response) => {\n\t\t\t\tsetShow({ successText: response.data.msg })\n\t\t\t\tsetEdit(!edit)\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tsetShow({ errorText: err.response.data.msg })\n\t\t\t})\n\t}\n\n\treturn (\n\t\t<div className=\"all-todos\">\n\t\t\t{show.successText ? (\n\t\t\t\t<Alert className=\"successmessage\" show={show} variant=\"success\">\n\t\t\t\t\t<Alert.Heading className=\"sucessheader\">Success!</Alert.Heading>\n\t\t\t\t\t<p className=\"successtext\">{show.successText}</p>\n\t\t\t\t\t<hr />\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ flexDirection: \"row\" }}\n\t\t\t\t\t\tclassName=\"success-text-div d-flex  justify-content-end\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<Link className=\"success-text-login\" to=\"/login\">\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => setShow({ successText: \"\" })}\n\t\t\t\t\t\t\t\tvariant=\"outline-success\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tGo to Login Page\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tonClick={() => setShow({ successText: \"\" })}\n\t\t\t\t\t\t\tvariant=\"outline-success\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tClose\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</Alert>\n\t\t\t) : (\n\t\t\t\t<></>\n\t\t\t)}\n\n\t\t\t{todos\n\t\t\t\t.filter((todo) => todo.userid == userData.user.id)\n\t\t\t\t.map((filteredTodo, key) => (\n\t\t\t\t\t<div className=\"todo-div\">\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tbg=\"primary\"\n\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\ttext=\"white\"\n\t\t\t\t\t\t\tstyle={{ width: \"18rem\" }}\n\t\t\t\t\t\t\tclassName=\"mb-2\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Card.Header>{filteredTodo.author}'s Todo List</Card.Header>\n\t\t\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t\t\t<Card.Title>Card Title </Card.Title>\n\t\t\t\t\t\t\t\t<Card.Text>\n\t\t\t\t\t\t\t\t\t<p>{filteredTodo.title}</p>\n\t\t\t\t\t\t\t\t\t{edit ? (\n\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setEditTitle(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t<p>{filteredTodo.text}</p>\n\t\t\t\t\t\t\t\t\t{edit ? (\n\t\t\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\t\t\tonChange={(e) => setEditText(e.target.value)}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t\t\t<p>{filteredTodo.author}</p>\n\t\t\t\t\t\t\t\t</Card.Text>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setEdit(!edit)}\n\t\t\t\t\t\t\t\t\tstyle={{ background: \"transparent \", border: \"none\" }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<PencilSquare fontSize=\"30px\" color=\"white\" />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => onDelete(filteredTodo.id)}\n\t\t\t\t\t\t\t\t\tstyle={{ background: \"transparent \", border: \"none\" }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<XSquare fontSize=\"30px\" color=\"white\" />\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t{edit ? (\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => onEdit(filteredTodo.id)}\n\t\t\t\t\t\t\t\t\t\tstyle={{ background: \"transparent \", border: \"none\" }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<Check2Square fontSize=\"30px\" color=\"white\" />\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t</Card.Body>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t</div>\n\t)\n}\n\nexport default MyTodos;\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Header.js",["65","66","67"],"import React, { useContext } from \"react\"\nimport { Navbar, Button, Form, FormControl, Nav } from \"react-bootstrap\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport { Link } from \"react-router-dom\"\nimport UserContext from \"../context/UserContext\"\n\nfunction Header() {\n\tconst { userData, setUserData } = useContext(UserContext)\n\n\tconst handleData = async () => {\n\t\tawait setUserData({\n\t\t\ttoken: null,\n\t\t\tuser: {\n\t\t\t\temail: null,\n\t\t\t\tusername: null,\n\t\t\t\tid: null,\n\t\t\t},\n\t\t})\n\t\tawait localStorage.setItem(\"auth-token\", \"\")\n\t}\n\n\treturn (\n\t\t<Navbar bg=\"light\" variant=\"light\">\n\t\t\t<Navbar.Brand href=\"/\">Todo App</Navbar.Brand>\n\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t<Nav.Link href=\"/\">VIEW ALL TODOS</Nav.Link>\n\t\t\t\t<Nav.Link href=\"/mytodos\">VIEW ONLY MY TODOS</Nav.Link>\n\t\t\t</Nav>\n\t\t\t<Form inline>\n\t\t\t\t{userData.user.id === null ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Nav.Link href=\"/register\">REGISTER</Nav.Link>\n\t\t\t\t\t\t<Nav.Link href=\"/login\">LOGIN</Nav.Link>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Nav.Link href=\"/add-todo\">ADD TODO</Nav.Link>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tstyle={{ background: \"none\", border: \"none\" }}\n\t\t\t\t\t\t\tonClick={() => handleData()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Nav.Link href=\"/\">LOGOUT</Nav.Link>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Form>\n\t\t</Navbar>\n\t)\n}\n\nexport default Header\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\404.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":7,"column":50,"nodeType":"74","messageId":"75","endLine":7,"endColumn":54},{"ruleId":"76","severity":1,"message":"77","line":60,"column":17,"nodeType":"78","messageId":"79","endLine":60,"endColumn":19},{"ruleId":"76","severity":1,"message":"77","line":101,"column":28,"nodeType":"78","messageId":"79","endLine":101,"endColumn":30},{"ruleId":"76","severity":1,"message":"77","line":111,"column":25,"nodeType":"78","messageId":"79","endLine":111,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":119,"column":25,"nodeType":"78","messageId":"79","endLine":119,"endColumn":27},{"ruleId":"76","severity":1,"message":"77","line":130,"column":27,"nodeType":"78","messageId":"79","endLine":130,"endColumn":29},{"ruleId":"76","severity":1,"message":"77","line":152,"column":25,"nodeType":"78","messageId":"79","endLine":152,"endColumn":27},{"ruleId":"72","severity":1,"message":"80","line":18,"column":10,"nodeType":"74","messageId":"75","endLine":18,"endColumn":18},{"ruleId":"72","severity":1,"message":"81","line":12,"column":20,"nodeType":"74","messageId":"75","endLine":12,"endColumn":31},{"ruleId":"72","severity":1,"message":"82","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":21},{"ruleId":"76","severity":1,"message":"77","line":84,"column":35,"nodeType":"78","messageId":"79","endLine":84,"endColumn":37},{"ruleId":"72","severity":1,"message":"83","line":2,"column":18,"nodeType":"74","messageId":"75","endLine":2,"endColumn":24},{"ruleId":"72","severity":1,"message":"84","line":2,"column":32,"nodeType":"74","messageId":"75","endLine":2,"endColumn":43},{"ruleId":"72","severity":1,"message":"73","line":4,"column":10,"nodeType":"74","messageId":"75","endLine":4,"endColumn":14},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'XSquareFill' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation"]