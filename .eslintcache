[{"C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\index.js":"1","C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\App.js":"2","C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\layout\\Nav.js":"3","C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\layout\\Footer.js":"4","C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\AllPosts.js":"5","C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\context\\UserContext.js":"6","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\index.js":"7","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\App.js":"8","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Footer.js":"9","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\context\\UserContext.js":"10","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AllTodos.js":"11","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Header.js":"12","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Register.js":"13","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Login.js":"14","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AddTodo.js":"15","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\MyTodos.js":"16"},{"size":176,"mtime":1612164305887,"results":"17","hashOfConfig":"18"},{"size":1001,"mtime":1612170346378,"results":"19","hashOfConfig":"18"},{"size":136,"mtime":1612128229645,"results":"20","hashOfConfig":"18"},{"size":142,"mtime":1612107645896,"results":"21","hashOfConfig":"18"},{"size":365,"mtime":1612169527342,"results":"22","hashOfConfig":"18"},{"size":78,"mtime":1612107605929,"results":"23","hashOfConfig":"18"},{"size":161,"mtime":1612523022742,"results":"24","hashOfConfig":"25"},{"size":1940,"mtime":1612523035058,"results":"26","hashOfConfig":"25"},{"size":108,"mtime":1612523022742,"results":"27","hashOfConfig":"25"},{"size":74,"mtime":1612523022741,"results":"28","hashOfConfig":"25"},{"size":918,"mtime":1612525447118,"results":"29","hashOfConfig":"25"},{"size":1189,"mtime":1612523022742,"results":"30","hashOfConfig":"25"},{"size":4305,"mtime":1612523022742,"results":"31","hashOfConfig":"25"},{"size":3810,"mtime":1612523022742,"results":"32","hashOfConfig":"25"},{"size":3790,"mtime":1612523022741,"results":"33","hashOfConfig":"25"},{"size":3865,"mtime":1612525464181,"results":"34","hashOfConfig":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"iuzhqz",{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x4qhf2",{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"56"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\index.js",[],["74","75"],"C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\App.js",["76","77"],"import Footer from \"./components/layout/Footer\";\nimport Nav from \"./components/layout/Nav\";\nimport AllPosts from \"./components/AllPosts\";\nimport React, { useState, useEffect } from \"react\";\nimport UserContext from \"./components/context/UserContext\";\nimport Axios from \"axios\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport './App.css';\n\nfunction App() {\n  const [posts, setPosts] = useState([]);\n\n  const [userData, setUserData] = useState({\n    token: undefined,\n    user: undefined\n  });\n\n\n\n  useEffect(() => {\n    Axios\n    .get('http://127.0.0.1:8080/posts')\n    .then(res => console.log(res))\n    .catch(error => console.log(error));\n  })\n\n\n  return (\n    <Router>\n      <UserContext.Provider value={{ userData, setUserData }}>\n        <Nav />\n          <Switch>\n            <Route exact path=\"/\" render={() => <AllPosts posts={posts} />} />\n          </Switch>\n        <Footer />\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\layout\\Nav.js",[],"C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\layout\\Footer.js",[],"C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\AllPosts.js",[],"C:\\Users\\MERT\\Desktop\\fastify-tutorial\\client\\src\\components\\context\\UserContext.js",[],["78","79"],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\index.js",[],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\App.js",["80"],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Footer.js",[],["81","82"],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\context\\UserContext.js",[],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AllTodos.js",["83"],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\layout\\Header.js",["84","85","86"],"import React, {useContext} from 'react'\r\nimport { Navbar, Button, Form, FormControl, Nav } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"../context/UserContext\";\r\n\r\nfunction Header() {\r\n\r\n  const { userData, setUserData } = useContext(UserContext);\r\n\r\n  const handleData = async () => {\r\n    setUserData({\r\n      token: undefined,\r\n      user: undefined\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Navbar bg=\"light\" variant=\"light\">\r\n    <Navbar.Brand href=\"#home\">Todo App</Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"/\">VIEW ALL TODOS</Nav.Link>\r\n      <Nav.Link href=\"/mytodos\">VIEW ONLY MY TODOS</Nav.Link>\r\n      <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n    </Nav>\r\n    <Form inline>\r\n    { userData.user ? (\r\n      <>\r\n      <Nav.Link href=\"/add-todo\">ADD TODO</Nav.Link>\r\n      <button style={{ background: 'none', border: 'none' }}onClick={handleData}><Nav.Link href=\"#\">LOGOUT</Nav.Link></button>\r\n      </>\r\n      ) : (\r\n      <>\r\n      <Nav.Link href=\"/register\">REGISTER</Nav.Link>\r\n      <Nav.Link href=\"/login\">LOGIN</Nav.Link>\r\n      </>\r\n      )}\r\n\r\n      \r\n    </Form>\r\n  </Navbar>\r\n\r\n  )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Register.js",[],"C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\Login.js",["87"],"import React, { useState, useContext } from 'react'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Button  } from 'react-bootstrap';\r\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\r\nimport Axios from 'axios';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport * as Yup from 'yup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"./context/UserContext\";\r\n\r\nfunction Login() {\r\n  const [show, setShow] = useState({\r\n    successText: \"\",\r\n    errorText: \"\"\r\n  });\r\n\r\n   const { userData, setUserData } = useContext(UserContext); \r\n   const history = useHistory();\r\n\r\n  const initialValues = {\r\n    email: '',\r\n    password: ''\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email('Invalid email address').required('Required'),\r\n    password: Yup.string().required('Required')\r\n  });\r\n\r\n\r\n  return (\r\n    <div className=\"login-div\">\r\n\r\n<Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={async (values) => {\r\n           \r\n                  await Axios.post(\r\n                    'http://localhost:8080/users/login',\r\n                    values,\r\n                  )\r\n                    .then((response) => {\r\n                      setUserData({\r\n                        token: response.data.token,\r\n                        user: response.data.user\r\n                      })\r\n\r\n                      localStorage.setItem(\"auth-token\", response.data.token);\r\n                      history.push(\"/\");\r\n                    })\r\n                    .catch((err) => {\r\n\r\n                      setShow({ errorText: err.response.data.msg });\r\n                    });\r\n                }}\r\n              >\r\n\r\n                {({ values, isSubmitting }) => (\r\n<Form className=\"register-form\">\r\n {show.errorText ? \r\n              <Alert variant=\"danger\" onClose={() => setShow({errorText: \"\"})} dismissible>\r\n        <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\r\n        <p>\r\n          {show.errorText}\r\n        </p>\r\n      </Alert>: <></> }\r\n\r\n{show.successText ? \r\n               <Alert className=\"successmessage\" show={show} variant=\"success\">\r\n        <Alert.Heading className=\"sucessheader\">Success!</Alert.Heading>\r\n        <p className=\"successtext\">\r\n          {show.successText}\r\n        </p>\r\n        <hr />\r\n        <div style={{ flexDirection: \"row\" }} className=\"success-text-div d-flex  justify-content-end\">\r\n          <Link className=\"success-text-login\" to=\"/login\">\r\n          <Button onClick={() => setShow({successText: \"\"})} variant=\"outline-success\">\r\n            Go to Login Page\r\n          </Button>\r\n          </Link>\r\n          <Button onClick={() => setShow({successText: \"\"})} variant=\"outline-success\">\r\n            Close\r\n          </Button>\r\n          \r\n        </div>\r\n      </Alert>: <></> }\r\n  <div className=\"email-div\">\r\n    <label className=\"label email-label\" htmlFor=\"email\">Email address</label>\r\n    <Field as={TextField}   className=\"field email-field\" type=\"email\" id=\"email\" name=\"email\" placeholder=\"Enter email\" />\r\n\r\n    <ErrorMessage className=\"errormessage\" name=\"email\">\r\n                          {(msg) => (\r\n                        \r\n                            <Alert className=\"alertmessage\" variant=\"danger\">\r\n                            {msg}\r\n                    </Alert>  \r\n                          )}\r\n                        </ErrorMessage>\r\n  </div>\r\n\r\n  <div className=\"password-div\">\r\n    <label className=\"label password-label\">Password</label>\r\n    <Field  as={TextField}  className=\"field password-field\" type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\" />\r\n    <ErrorMessage className=\"errormessage\" name=\"password\">\r\n                          {(msg) => (\r\n                        \r\n                            <Alert className=\"alertmessage\" variant=\"danger\">\r\n                            {msg}\r\n                    </Alert>  \r\n                          )}\r\n                        </ErrorMessage>\r\n  </div>\r\n\r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Submit\r\n  </Button>\r\n</Form>\r\n                )}\r\n</Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\AddTodo.js",["88"],"import React, { useState, useContext } from 'react'\r\nimport {  Button  } from 'react-bootstrap';\r\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\r\nimport Axios from 'axios';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport * as Yup from 'yup';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Link } from \"react-router-dom\";\r\nimport UserContext from \"./context/UserContext\";\r\n\r\nfunction AddTodo() {\r\n\r\n  \r\n  const { userData, setUserData } = useContext(UserContext); \r\n\r\n\r\n  const [show, setShow] = useState({\r\n    successText: \"\",\r\n    errorText: \"\"\r\n  });\r\n\r\n  const initialValues = {\r\n    title: '',\r\n    text: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    title: Yup.string().required('Required'),\r\n    text: Yup.string().required('Required')\r\n  });\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"register-div\">\r\n\r\n<Formik\r\n                initialValues={initialValues}\r\n                validationSchema={validationSchema}\r\n                onSubmit={async (values) => {\r\n                  values.userId = userData.user.id;\r\n                  console.log(values)\r\n                  await Axios.post(\r\n                    'http://localhost:8080/todos/add',\r\n                    values,\r\n                  )\r\n                    .then((response) => {\r\n                      setShow({ successText: response.data.msg });\r\n                    })\r\n                    .catch((err) => {\r\n\r\n                      setShow({ errorText: err.response.data.msg });\r\n                    });\r\n                }}\r\n              >\r\n\r\n                {({ values, isSubmitting }) => (\r\n<Form className=\"register-form\">\r\n {show.errorText ? \r\n              <Alert variant=\"danger\" onClose={() => setShow({errorText: \"\"})} dismissible>\r\n        <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\r\n        <p>\r\n          {show.errorText}\r\n        </p>\r\n      </Alert>: <></> }\r\n\r\n{show.successText ? \r\n    <Alert className=\"successmessage\" show={show} variant=\"success\">\r\n        <Alert.Heading className=\"sucessheader\">Success!</Alert.Heading>\r\n        <p className=\"successtext\">\r\n          {show.successText}\r\n        </p>\r\n        <hr />\r\n        <div style={{ flexDirection: \"row\" }} className=\"success-text-div d-flex  justify-content-end\">\r\n          <Link className=\"success-text-login\" to=\"/login\">\r\n          <Button onClick={() => setShow({successText: \"\"})} variant=\"outline-success\">\r\n            Go to Home Page\r\n          </Button>\r\n          </Link>\r\n          <Button onClick={() => setShow({successText: \"\"})} variant=\"outline-success\">\r\n            Close\r\n          </Button>\r\n          \r\n        </div>\r\n      </Alert>: <></> }\r\n\r\n<div className=\"title\">\r\n    <label className=\"label title-label\" htmlFor=\"username\">Title</label>\r\n    <Field as={TextField} className=\"field title-field\" id=\"title\" name=\"title\" type=\"type\" placeholder=\"Enter title\" />\r\n    <p className=\"text-muted\">\r\n      Provide us a todo title that you would like to have.\r\n    </p>\r\n    <ErrorMessage className=\"errormessage\" name=\"username\">\r\n                          {(msg) => (\r\n                        \r\n                            <Alert className=\"alertmessage\" variant=\"danger\">\r\n                            {msg}\r\n                    </Alert>  \r\n                          )}\r\n                        </ErrorMessage>\r\n  </div>\r\n\r\n\r\n  <div className=\"text-div\">\r\n    <label className=\"label text-label\" htmlFor=\"text\">Text</label>\r\n    <Field as={TextField} className=\"field text-field\" type=\"text\" id=\"text\" name=\"text\" placeholder=\"Enter text\" />\r\n    <p className=\"text-muted\">\r\n      Write your todo text here.\r\n    </p>\r\n    <ErrorMessage className=\"errormessage\" name=\"email\">\r\n                          {(msg) => (\r\n                        \r\n                            <Alert className=\"alertmessage\" variant=\"danger\">\r\n                            {msg}\r\n                    </Alert>  \r\n                          )}\r\n                        </ErrorMessage>\r\n  </div>\r\n\r\n  <Button variant=\"primary\" type=\"submit\">\r\n    Submit\r\n  </Button>\r\n</Form>\r\n                )}\r\n</Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddTodo;\r\n","C:\\Users\\MERT\\Desktop\\postgres-blog\\client\\src\\components\\MyTodos.js",["89","90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":50,"nodeType":"98","messageId":"99","endLine":7,"endColumn":54},{"ruleId":"96","severity":1,"message":"100","line":12,"column":17,"nodeType":"98","messageId":"99","endLine":12,"endColumn":25},{"ruleId":"92","replacedBy":"101"},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":50,"nodeType":"98","messageId":"99","endLine":7,"endColumn":54},{"ruleId":"92","replacedBy":"103"},{"ruleId":"94","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":14,"column":28,"nodeType":"107","messageId":"108","endLine":14,"endColumn":30},{"ruleId":"96","severity":1,"message":"109","line":2,"column":18,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"96","severity":1,"message":"110","line":2,"column":32,"nodeType":"98","messageId":"99","endLine":2,"endColumn":43},{"ruleId":"96","severity":1,"message":"97","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":14},{"ruleId":"96","severity":1,"message":"111","line":18,"column":12,"nodeType":"98","messageId":"99","endLine":18,"endColumn":20},{"ruleId":"96","severity":1,"message":"112","line":14,"column":21,"nodeType":"98","messageId":"99","endLine":14,"endColumn":32},{"ruleId":"96","severity":1,"message":"113","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":21},{"ruleId":"96","severity":1,"message":"114","line":7,"column":10,"nodeType":"98","messageId":"99","endLine":7,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":85,"column":35,"nodeType":"107","messageId":"108","endLine":85,"endColumn":37},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'setPosts' is assigned a value but never used.",["115"],["116"],["115"],["116"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'FormControl' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'XSquareFill' is defined but never used.","'ArrowRight' is defined but never used.","no-global-assign","no-unsafe-negation"]